'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Factory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _graphql = require('graphql');

var _error = require('graphql/error');

var _language = require('graphql/language');

var _types = require('./types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Factory = exports.Factory = function () {
  function Factory() {
    _classCallCheck(this, Factory);
  }

  _createClass(Factory, [{
    key: 'getRegexScalar',
    value: function getRegexScalar(options) {
      var error = options.error || 'Query error: ' + options.name;

      var parser = function parser(ast) {
        if (ast.kind !== _language.Kind.STRING) {
          throw new _error.GraphQLError('Query error: Can only parse strings got a: ' + ast.kind, [ast]);
        }

        var re = options.regex;
        if (!re.test(ast.value)) {
          throw new _error.GraphQLError(error, [ast]);
        }

        return ast.value;
      };

      return this.getCustomScalar(options.name, options.description, parser);
    }
  }, {
    key: 'getCustomScalar',
    value: function getCustomScalar(name, description, parser) {
      return new _types.GraphQLCustomScalarType(name, description, parser);
    }
  }]);

  return Factory;
}();