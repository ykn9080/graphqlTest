'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLDateTime = exports.GraphQLPassword = exports.GraphQLLimitedString = exports.GraphQLUUID = exports.GraphQLURL = exports.GraphQLEmail = undefined;

var _error = require('graphql/error');

var _language = require('graphql/language');

var _factory = require('./factory');

var _types = require('./types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = new _factory.Factory();

var GraphQLEmail = exports.GraphQLEmail = factory.getRegexScalar({
  name: 'Email',
  regex: /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i,
  description: 'The Email scalar type represents E-Mail addresses compliant to RFC 822.',
  error: 'Query error: Not a valid Email address'
});

var GraphQLURL = exports.GraphQLURL = factory.getRegexScalar({
  name: 'URL',
  // RegExp taken from https://gist.github.com/dperini/729294
  regex: new RegExp('^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$', 'i'),
  description: 'The URL scalar type represents URL addresses.',
  error: 'Query error: Not a valid URL'
});

var GraphQLUUID = exports.GraphQLUUID = factory.getRegexScalar({
  name: 'UUID',
  // https://github.com/chriso/validator.js/blob/master/src/lib/isUUID.js#L7
  regex: new RegExp('^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$', 'i'),
  description: 'The UUID scalar type represents a UUID.',
  error: 'Query error: Not a valid UUID'
});

var stringValidator = function stringValidator(ast) {
  if (ast.kind !== _language.Kind.STRING) {
    throw new _error.GraphQLError('Query error: Can only parse strings got a: ' + ast.kind, [ast]);
  }
};

var lengthValidator = function lengthValidator(ast, min, max) {
  if (ast.value.length < min) {
    throw new _error.GraphQLError('Query error: String not long enough', [ast]);
  }

  if (max && ast.value.length > max) {
    throw new _error.GraphQLError('Query error: String too long', [ast]);
  }
};

var alphabetValidator = function alphabetValidator(ast, alphabet) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = ast.value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var char = _step.value;

      if (alphabet.indexOf(char) < 0) {
        throw new _error.GraphQLError('Query error: Invalid character found', [ast]);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var complexityValidator = function complexityValidator(ast, options) {
  var complexity = options || {};
  var alhpaNumericRe = /^(?=.*[0-9])(?=.*[a-zA-Z])(.+)$/;
  var mixedCaseRe = /^(?=.*[a-z])(?=.*[A-Z])(.+)$/;
  var specialCharsRe = /^(?=.*[^a-zA-Z0-9])(.+)$/;

  if (complexity.alphaNumeric && !alhpaNumericRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one number and one letter', [ast]);
  }

  if (complexity.mixedCase && !mixedCaseRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one uper and one lower case letter', [ast]);
  }

  if (complexity.specialChars && !specialCharsRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one special character', [ast]);
  }
};

var limitedStringCounter = 0;

var GraphQLLimitedString = exports.GraphQLLimitedString = function (_GraphQLCustomScalarT) {
  _inherits(GraphQLLimitedString, _GraphQLCustomScalarT);

  function GraphQLLimitedString() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var max = arguments[1];
    var alphabet = arguments[2];

    _classCallCheck(this, GraphQLLimitedString);

    var suffix = limitedStringCounter++ > 0 ? limitedStringCounter : '';
    var name = 'LimitedString' + suffix;
    var description = 'A limited string.';
    if (max) description += ' Has to be between ' + min + ' and ' + max + ' characters long.';else description += ' Has to be at least ' + min + ' characters long.';
    if (alphabet) description += ' May only contain the following characters: ' + alphabet;

    var validator = function validator(ast) {
      stringValidator(ast);
      lengthValidator(ast, min, max);

      if (alphabet) alphabetValidator(ast, alphabet);

      return ast.value;
    };

    return _possibleConstructorReturn(this, (GraphQLLimitedString.__proto__ || Object.getPrototypeOf(GraphQLLimitedString)).call(this, name, description, validator));
  }

  return GraphQLLimitedString;
}(_types.GraphQLCustomScalarType);

;

var passwordCounter = 0;

var GraphQLPassword = exports.GraphQLPassword = function (_GraphQLCustomScalarT2) {
  _inherits(GraphQLPassword, _GraphQLCustomScalarT2);

  function GraphQLPassword() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var max = arguments[1];
    var alphabet = arguments[2];
    var complexity = arguments[3];

    _classCallCheck(this, GraphQLPassword);

    var suffix = passwordCounter++ > 0 ? passwordCounter : '';
    var name = 'Password' + suffix;
    var description = 'A password string.';
    if (max) description += ' Has to be between ' + min + ' and ' + max + ' characters long.';else description += ' Has to be at least ' + min + ' characters long.';
    if (alphabet) description += ' May only contain the following characters: ' + alphabet;
    if (complexity) {
      if (complexity.alphaNumeric) description += ' Has to be alpha numeric.';
      if (complexity.mixedCase) description += ' Has to be mixed case.';
      if (complexity.specialChars) description += ' Has to contain special characters.';
    }

    var validator = function validator(ast) {
      stringValidator(ast);
      lengthValidator(ast, min, max);

      if (alphabet) alphabetValidator(ast, alphabet);
      if (complexity) complexityValidator(ast, complexity);

      return ast.value;
    };

    return _possibleConstructorReturn(this, (GraphQLPassword.__proto__ || Object.getPrototypeOf(GraphQLPassword)).call(this, name, description, validator));
  }

  return GraphQLPassword;
}(_types.GraphQLCustomScalarType);

;

var GraphQLDateTime = exports.GraphQLDateTime = factory.getCustomScalar('DateTime', 'The DateTime scalar type represents date time strings complying to ISO-8601.', function (ast) {
  stringValidator(ast);
  if (isNaN(Date.parse(ast.value))) {
    throw new _error.GraphQLError('Query error: String is not a valid date time string', [ast]);
  }

  return ast.value;
});